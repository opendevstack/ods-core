apiVersion: v1
kind: Template
metadata:
  name: sonarqube
parameters:
- name: ODS_BITBUCKET_PROJECT
  description: Bitbucket project name.
  value: opendevstack
- name: ODS_NAMESPACE
  description: OpenDevStack namespace to use.
  value: ods
- name: ODS_IMAGE_TAG
  description: OpenDevStack image tag to use.
  required: true
- name: ODS_GIT_REF
  description: Git ref to use for source code.
  required: true
- displayName: Admin Password
  name: SONAR_ADMIN_PASSWORD_B64
  description: The base64 encoded admin password
  required: true
- displayName: Admin Username
  name: SONAR_ADMIN_USERNAME
  description: the sonarqube admin username
  required: true
- displayName: Auth Token
  name: SONAR_AUTH_TOKEN_B64
  required: true
- displayName: Crowd Application
  name: SONAR_CROWD_APPLICATION
  description: application name as setup in crowd for authn/z
- displayName: Crowd Password
  name: SONAR_CROWD_PASSWORD_B64
  description: base64 encoded application password as setup in crowd for authn/z
- displayName: Crowd URL
  name: CROWD_URL
  description: url under which crowd is reachable from sonaruqbe
- displayName: Database JDBC URL
  name: SONAR_DATABASE_JDBC_URL
  description: database jdbc url, e.g. jdbc:postgresql://sonarqube-postgresql:5432/sonarqube
  required: true
- displayName: Database Name
  name: SONAR_DATABASE_NAME
  description: database name, e.g. sonarqube
  required: true
- displayName: Database Password
  name: SONAR_DATABASE_PASSWORD_B64
  description: base64 encoded database user password
  required: true
- displayName: Database User
  name: SONAR_DATABASE_USER
  description: the database user to connect ot the database
  required: true
- name: SONARQUBE_HOST
  description: Host without protocol exposed by the sonarqube route
  required: true
- name: REPO_BASE
  required: true
  description: Repository base url. In case bitbucket is used, needs to include /scm - so it's the path in front on opendevstack/..
- name: STORAGE_CLASS_DATA
  # for AWS the default is gp2
  description: Storage class for data for AWS, e.g. gp2. Leave empty for local (e.g. vagrant) deployment
  value: ""
- name: STORAGE_PROVISIONER
  description: The kubernetes provisioner, e.g. kubernetes.io/aws-ebs. Leave empty for local (e.g. vagrant) deployment
- name: STORAGE_CLASS_BACKUP
  # for AWS the default would be gp2-encrypted
  description: Storage class for backup for AWS, e.g. gp2-encrypted. Leave empty for local (e.g. vagrant) deployment
- name: SONAR_DISTRIBUTION_URL
  description: "Sonarqube distribution url. Example community edition: https://sonarsource.bintray.com/Distribution/sonarqube/sonarqube-7.3.zip"
- name: SONAR_VERSION
  description: "Sonarqube version specified in the variable SONAR_DISTRIBUTION_URL"
- name: SONAR_AUTH_CROWD
  description: "Set to true, if you want to use crowd as identity provider"
- name: APP_DNS
  description: OpenShift application base dns - used for grabbing the root ca and adding into the agent
- name: SONAR_CPU_REQUEST
  value: 200m
- name: SONAR_CPU_LIMIT
  value: "1"
- name: SONAR_MEMORY_REQUEST
  value: 2560Mi
- name: SONAR_MEMORY_LIMIT
  value: 4Gi
- name: SONAR_BUILD_CPU_REQUEST
  value: 200m
- name: SONAR_BUILD_CPU_LIMIT
  value: "1"
- name: SONAR_BUILD_MEMORY_REQUEST
  value: 1Gi
- name: SONAR_BUILD_MEMORY_LIMIT
  value: 2Gi
- name: SONAR_POSTGRESQL_CPU_REQUEST
  value: 100m
- name: SONAR_POSTGRESQL_CPU_LIMIT
  value: "1"
- name: SONAR_POSTGRESQL_MEMORY_REQUEST
  value: 256Mi
- name: SONAR_POSTGRESQL_MEMORY_LIMIT
  value: 512Mi
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: sonarqube:${ODS_IMAGE_TAG}
    postCommit: {}
    resources:
      limits:
        cpu: ${SONAR_BUILD_CPU_LIMIT}
        memory: ${SONAR_BUILD_MEMORY_LIMIT}
      requests:
        cpu: ${SONAR_BUILD_CPU_REQUEST}
        memory: ${SONAR_BUILD_MEMORY_REQUEST}
    runPolicy: Serial
    source:
      contextDir: sonarqube/docker
      git:
        uri: ${REPO_BASE}/${ODS_BITBUCKET_PROJECT}/ods-core.git
        ref: ${ODS_GIT_REF}
      sourceSecret:
        name: cd-user-token
      type: Git
    strategy:
      dockerStrategy:
        forcePull: true
        noCache: true
        buildArgs:
          - name: sonarVersion
            value: ${SONAR_VERSION}
          - name: sonarDistributionUrl
            value: ${SONAR_DISTRIBUTION_URL}
          - name: APP_DNS
            value: ${APP_DNS}
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers: []
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonarqube-postgresql
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: sonarqube-postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          name: sonarqube-postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              configMapKeyRef:
                key: database-user
                name: sonarqube
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonarqube-postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              configMapKeyRef:
                key: database-name
                name: sonarqube
          image: ''
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${SONAR_POSTGRESQL_CPU_LIMIT}
              memory: ${SONAR_POSTGRESQL_MEMORY_LIMIT}
            requests:
              cpu: ${SONAR_POSTGRESQL_CPU_REQUEST}
              memory: ${SONAR_POSTGRESQL_MEMORY_REQUEST}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: sonarqube-postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonarqube-postgresql-data
          persistentVolumeClaim:
            claimName: sonarqube-postgresql
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.6
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: sonarqube
          deploymentconfig: sonarqube
          tuned.openshift.io/elasticsearch: ""
      spec:
        containers:
        - name: sonarqube
          image: ${ODS_NAMESPACE}/sonarqube:${ODS_IMAGE_TAG}
          env:
          - name: SONARQUBE_JDBC_URL
            valueFrom:
              configMapKeyRef:
                key: database-jdbc-url
                name: sonarqube
          - name: SONARQUBE_JDBC_USERNAME
            valueFrom:
              configMapKeyRef:
                key: database-user
                name: sonarqube
          - name: SONARQUBE_JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonarqube-postgresql
          - name: SONARQUBE_CROWD_URL
            valueFrom:
              configMapKeyRef:
                key: crowd-url
                name: sonarqube
          - name: SONARQUBE_CROWD_APP
            valueFrom:
              configMapKeyRef:
                key: crowd-application
                name: sonarqube
          - name: SONARQUBE_CROWD_PWD
            valueFrom:
              secretKeyRef:
                key: crowd-password
                name: sonarqube-app
          - name: SONAR_AUTH_CROWD
            value: ${SONAR_AUTH_CROWD}
          imagePullPolicy: Always
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/server/version
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            limits:
              cpu: ${SONAR_CPU_LIMIT}
              memory: ${SONAR_MEMORY_LIMIT}
            requests:
              cpu: ${SONAR_CPU_REQUEST}
              memory: ${SONAR_MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: sonarqube-data
          - mountPath: /opt/sonarqube/extensions
            name: sonarqube-extensions
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonarqube-data
          persistentVolumeClaim:
            claimName: sonarqube-data
        - name: sonarqube-extensions
          persistentVolumeClaim:
            claimName: sonarqube-extensions
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - sonarqube
        from:
          kind: ImageStreamTag
          name: sonarqube:${ODS_IMAGE_TAG}
          namespace: ${ODS_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      volume.beta.kubernetes.io/storage-provisioner: ${STORAGE_PROVISIONER}
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonarqube-postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    storageClassName: ${STORAGE_CLASS_DATA}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      volume.beta.kubernetes.io/storage-provisioner: ${STORAGE_PROVISIONER}
    finalizers:
      - kubernetes.io/pvc-protection
    labels:
      app: sonarqube
    name: sonarqube-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    storageClassName: ${STORAGE_CLASS_DATA}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      volume.beta.kubernetes.io/storage-provisioner: ${STORAGE_PROVISIONER}
    finalizers:
      - kubernetes.io/pvc-protection
    labels:
      app: sonarqube
    name: sonarqube-extensions
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: ${STORAGE_CLASS_DATA}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    host: ${SONARQUBE_HOST}
    port:
      targetPort: 9000-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: sonarqube
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  data:
    admin-password: ${SONAR_ADMIN_PASSWORD_B64}
    crowd-password: ${SONAR_CROWD_PASSWORD_B64}
  kind: Secret
  metadata:
    labels:
      app: sonarqube
    name: sonarqube-app
  type: Opaque
- kind: ConfigMap
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  apiVersion: v1
  data:
    crowd-application: ${SONAR_CROWD_APPLICATION}
    crowd-url: ${CROWD_URL}
    database-jdbc-url: ${SONAR_DATABASE_JDBC_URL}
    database-name: ${SONAR_DATABASE_NAME}
    database-user: ${SONAR_DATABASE_USER}
    sonarqube-admin-user: ${SONAR_ADMIN_USERNAME}
- apiVersion: v1
  data:
    database-password: ${SONAR_DATABASE_PASSWORD_B64}
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonarqube-postgresql
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonarqube-postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: sonarqube-postgresql
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      deploymentconfig: sonarqube
    sessionAffinity: None
    type: ClusterIP
