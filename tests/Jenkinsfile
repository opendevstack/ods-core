properties([
    parameters([
        string(
            name: 'Quickstarter',
            description: 'Enter the quickstarter name which is to be tested. Use "all" to test all the quickstarters together'
        ),
        string(
            name: 'QuickstarterRepository',
            defaultValue: 'ods-quickstarters',
            description: 'Enter the repository name for the quickstarter which is to be tested'
        ),
        string(
            name: 'quickstarterRef',
            defaultValue: '4.x',
            description: 'Enter the reference for the quickstarter (e.g., branch, tag, or commit)'
        ),
        string(
            name: 'configurationRef',
            defaultValue: 'master',
            description: 'Enter the reference for the configuration (e.g., branch, tag, or commit)'
        ),
        string(
            name: 'Project',
            description: 'Enter the project name (in lower case) where the quickstarter will be provisioned'
        ),
        string(
            name: 'ODS_NAMESPACE',
            defaultValue: 'ods',
            description: 'Enter the ods namespae to fetch the jenkins agent. Include "-cd" if the ODS Namespace is not ods as default'
        ),
        string(
            name: 'ODS_URL',
            defaultValue: 'https://github.com/opendevstack',
            description: 'Enter the whole URL of the ODS files (https included)'
        ),
        string(
            name: 'JENKINS_AGENT_TAG',
            defaultValue: '4.x',
            description: 'Enter the tag for the jenkins golang agent'
        ),
        string(
            name: 'SONAR_QUALITY_PROFILE',
            description: 'Enter the tag for the jenkins golang agent'
        ),
        text(
            name: 'excludedQuickstarters',
            defaultValue: '''inf-terraform-aws
inf-terraform-azure
ods-document-gen-svc
ods-provisioning-app
release-manager
ds-jupyter-lab
ds-rshiny''',
            description: 'Enter the list of excluded quickstarters, one per line'
        )        
    ]),
    disableConcurrentBuilds(),
    buildDiscarder(logRotator(numToKeepStr: '10')),
])

// The project that we will use to test the quickstarters
def project = params.Project
// The Quickstarter to test
def quickstarter = params.Quickstarter
// Namespace fo the cd project
def odsNamespace = params.ODS_NAMESPACE
// odsReference
def odsRef = params.quickstarterRef?:"master"
// configurationReference
def confRef = params.configurationRef?:"master"
// QS repo
def QUICKSTARTER_REPO = params.QuickstarterRepository

// URIS of the repositories used 
def QUICK_STARTERS_URL = "${ODS_URL}/${QUICKSTARTER_REPO}.git"
def QUICK_STARTERS_BRANCH = "${quickstarterRef}"

def ODS_CONFIGURATION_URL = "${ODS_URL}/ods-configuration.git"
def ODS_CONFIGURATION_BRANCH = "${confRef}"

def ODS_CORE_URL = "${ODS_URL}/ods-core.git"
def ODS_CORE_BRANCH = "${quickstarterRef}"

def JENKINS_AGENT_TAG = "${JENKINS_AGENT_TAG}"
def SONAR_QUALITY_PROFILE = "${SONAR_QUALITY_PROFILE}"

// List of QS that we want to exclude from the execution of the job.
def excludedQS = params.excludedQuickstarters?:''


echo "QUICKSTARTER_REPO : ${QUICKSTARTER_REPO}"             
                    
// Jenkins DeploymentConfig environment variables
def dockerRegistry
node {
  dockerRegistry = env.DOCKER_REGISTRY
}

// We need a golang version >= 17, so if we don't have one we need to build it. 
// trigger pipeline

def conts = containerTemplate(
  name: 'jnlp',
  image: "${dockerRegistry}/${odsNamespace}/jenkins-agent-golang:${JENKINS_AGENT_TAG}",
  workingDir: '/tmp',
  alwaysPullImage: true,
  args: ''
)
def podLabel = "qs-tests"

podTemplate(
  label: podLabel,
  cloud: 'openshift',
  containers: [conts],
  volumes: [],
  serviceAccount: 'jenkins'
) {
  node(podLabel) {
      
    stage('Init') {
        currentBuild.description = "Testing QS"
    
        dir("${QUICKSTARTER_REPO}"){
            git branch: "${QUICK_STARTERS_BRANCH}",
                credentialsId: "${project}-cd-cd-user-with-password",
                url: "${QUICK_STARTERS_URL}"
        }
        dir('ods-configuration'){
            git branch: "${ODS_CONFIGURATION_BRANCH}",
                credentialsId: "${project}-cd-cd-user-with-password",
                url: "${ODS_CONFIGURATION_URL}"
        }
        
        dir('ods-core'){          
            git branch: "${ODS_CORE_BRANCH}",
                credentialsId: "${project}-cd-cd-user-with-password",
                url: "${ODS_CORE_URL}"
            
            // Write the file used to exclude Quickstarters in the tests
            echo "Writing file quickStartersExclusionList.txt"
            writeFile file: './tests/quickStartersExclusionList.txt', text: excludedQS
        }
    }

    stage('Test') {
        echo "${WORKSPACE}"
        
        // If we select 'all' no one parameter will be provided, so it will try to test all the Quickstarters
        // that have a test defined in the testdata folder.
        def quickstarter_to_test = ""
        quickstarter_to_test = "-q ${quickstarter}"
        
        echo "QUICKSTARTER TO TEST : ${quickstarter_to_test}"
        echo "QUICKSTARTER REPO : ${QUICKSTARTER_REPO}"
        echo "Project : ${project}"
        
        // In different environments SONAR_QUALITY_PROFILE can be different, with this env variable we provide 
        // the needed value
        withEnv([
          "CGO_ENABLED=0", 
          "GOMODCACHE=${WORKSPACE}/.cache", 
          "SONAR_QUALITY_PROFILE=${SONAR_QUALITY_PROFILE}",
          "ODS_GIT_REF=${odsRef}"]) {
            sh """
                cd ods-core/tests
                ls -lrta
                ./quickstarter-test.sh -p ${project} -qf "${QUICKSTARTER_REPO}/..." ${quickstarter_to_test} || true
            """
        }

    }

    stage('Get test results') {
        archiveArtifacts artifacts: 'ods-core/tests/*.txt', followSymlinks: false
        archiveArtifacts artifacts: 'ods-core/tests/test-quickstarter-report.xml', followSymlinks: false
        junit(testResults:"ods-core/tests/test-quickstarter-report.xml", allowEmptyResults:true)        

    }
  }
}

