// BuildConfig environment variables
def odsNamespace = env.ODS_NAMESPACE ?: 'ods'
def odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
def odsGitRef = env.ODS_GIT_REF ?: 'master'
def odsBitbucketProject = env.ODS_BITBUCKET_PROJECT ?: 'opendevstack'
def projectId = env.PROJECT_ID
def projectAdmins = env.PROJECT_ADMIN ?: ''
def projectGroups = env.PROJECT_GROUPS ?: ''
def pipelineTriggerSecret = env.PIPELINE_TRIGGER_SECRET
def cdUserIdB64 = env.CD_USER_ID_B64
def cdUserType = env.CD_USER_TYPE

// Jenkins DeploymentConfig environment variables
def bitbucketUrl
def dockerRegistry
def pipelineOpenShiftProject
node {
  dockerRegistry = env.DOCKER_REGISTRY
  if (env.GIT_SERVER_URL) {
    bitbucketUrl = env.GIT_SERVER_URL
  } else if (env.BITBUCKET_URL) {
    bitbucketUrl = env.BITBUCKET_URL
  } else if (env.BITBUCKET_HOST) {
    bitbucketUrl = env.BITBUCKET_HOST // Fallback for Jenkins master instances not updated from 2.x
  } else {
    error('''Neither 'GIT_SERVER_URL' nor 'BITBUCKET_URL' is present, but at least one is required.''')
  }
  if (!bitbucketUrl.contains('://')) {
    bitbucketUrl = "https://${bitbucketUrl}" // Fallback for old provisioning app instances not updated from 2.x
  }
  echo("Resolved variable 'bitbucketUrl' to '${bitbucketUrl}'! [default=${env.BITBUCKET_URL}, custom=${env.GIT_SERVER_URL}]")
  pipelineOpenShiftProject = env.JOB_NAME.split('/').first()
}

def conts = containerTemplate(
  name: 'jnlp',
  image: "${dockerRegistry}/${odsNamespace}/jenkins-agent-base:${odsImageTag}",
  workingDir: '/tmp',
  alwaysPullImage: true,
  args: ''
)
def podLabel = "create-projects-${projectId}";

podTemplate(
  label: podLabel,
  cloud: 'openshift',
  containers: [conts],
  volumes: [],
  serviceAccount: 'jenkins'
) {
  node(podLabel) {
    currentBuild.description = "ODS Build #${env.BUILD_NUMBER} creating project: ${projectId}"
    stage('Checkout ods-core') {
      sh 'mkdir -p ods-core'
      dir('ods-core') {
        checkout scm
      }
    }

    stage('Checkout ods-configuration') {
      echo("Getting ods configuration from ${bitbucketUrl}")
      checkout([
        $class: 'GitSCM',
        branches: [[name: "*/master"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[
          $class: 'RelativeTargetDirectory',
          relativeTargetDir: 'ods-configuration'
        ]],
        submoduleCfg: [],
        userRemoteConfigs: [[
          credentialsId: "${pipelineOpenShiftProject}-cd-user-with-password",
          url: "${bitbucketUrl}/scm/${odsBitbucketProject}/ods-configuration.git"
        ]]
      ])
    }

    stage('Create OpenShift projects') {
      dir('ods-core') {
        sh(
          script: """./create-projects/create-projects.sh --verbose \
            --project=${projectId} \
            --groups=${projectGroups}""",
          label: 'Create OpenShift projects'
        )
      }
    }

    stage('Setup Jenkins in CD project') {
      dir('ods-core') {
        sh(
          script: """./create-projects/create-cd-jenkins.sh --verbose \
            --non-interactive \
            --project=${projectId} \
            --ods-namespace=${odsNamespace} \
            --ods-image-tag=${odsImageTag} \
            --ods-bitbucket-project ${odsBitbucketProject} \
            --pipeline-trigger-secret-b64=${pipelineTriggerSecret} \
            --cd-user-type=${cdUserType} \
            --cd-user-id-b64=${cdUserIdB64}""",
          label: 'Setup Jenkins in CD project'
        )
      }
    }

    stage('Setup Post-Creation Scripts') {
        // Load post-creation scripts configuration
        def postCreationEnabled = getConfigValue('POST_CREATION_SCRIPTS_ENABLED', 'ods-configuration/ods-core.env', 'false')

        if (!postCreationEnabled || postCreationEnabled != 'true') {
            echo("Post-creation scripts are disabled or not configured. Skipping setup.")
            env.POST_SCRIPTS_ENABLED = 'false'
            return
        }

        def scriptsOrder = getConfigValue('POST_CREATION_SCRIPTS_ORDER', 'ods-configuration/ods-core.env').trim()
        if (!scriptsOrder || scriptsOrder.trim().isEmpty()) {
            echo("No scripts specified in POST_CREATION_SCRIPTS_ORDER. Skipping setup.")
            env.POST_SCRIPTS_ENABLED = 'false'
            return
        }

        echo("Post-creation scripts are enabled. Retrieving configuration...")
        
        // Get scripts repository configuration
        def scriptsRepoUrl    = getConfigValue('POST_CREATION_SCRIPTS_REPO_URL', 'ods-configuration/ods-core.env')
        def scriptsBranch     = getConfigValue('POST_CREATION_SCRIPTS_BRANCH', 'ods-configuration/ods-core.env', 'master')
        def scriptsConfigFile = getConfigValue('POST_CREATION_SCRIPTS_CONFIG_FILE', 'ods-configuration/ods-core.env')

        def configRepoUrl    = getConfigValue('POST_CREATION_SCRIPTS_CONFIG_REPO_URL', 'ods-configuration/ods-core.env')
        def configRepoBranch = getConfigValue('POST_CREATION_SCRIPTS_CONFIG_REPO_BRANCH', 'ods-configuration/ods-core.env', 'master')
                
        // Check if required configuration is missing
        if (!scriptsRepoUrl || scriptsRepoUrl.trim().isEmpty()) {
            echo("POST_CREATION_SCRIPTS_REPO_URL is not configured. Skipping setup.")
            env.POST_SCRIPTS_ENABLED = 'false'
            return
        }

        if (!scriptsConfigFile || scriptsConfigFile.trim().isEmpty()) {
            echo("POST_CREATION_SCRIPTS_CONFIG_FILE is not configured. Skipping setup.")
            env.POST_SCRIPTS_ENABLED = 'false'
            return
        }
        
        echo("Scripts repository: ${scriptsRepoUrl}")
        echo("Scripts branch: ${scriptsBranch}")
        echo("Scripts order: ${scriptsOrder}")
        echo("Scripts config file: ${scriptsConfigFile}")
        echo("Config repo URL: ${configRepoUrl}")
        echo("Config repo branch: ${configRepoBranch}")

        def credentialsId = "${pipelineOpenShiftProject}-cd-user-with-password"
        
        // Clone the scripts repository
        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/${scriptsBranch}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[
            $class: 'RelativeTargetDirectory',
            relativeTargetDir: 'post-creation-scripts'
          ]],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: "${credentialsId}",
            url: "${scriptsRepoUrl}"
          ]]
        ])
        
        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/${configRepoBranch}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[
            $class: 'RelativeTargetDirectory',
            relativeTargetDir: 'post-creation-config'
          ]],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: "${credentialsId}",
            url: "${configRepoUrl}"
          ]]
        ])
        
        // Store configuration for next stage
        env.POST_SCRIPTS_ENABLED = 'true'
        env.POST_SCRIPTS_ORDER = scriptsOrder
        env.POST_SCRIPTS_CONFIG_FILE = scriptsConfigFile
    }

    stage('Execute Post-Creation Scripts') {
      dir('post-creation-scripts') {

        if (env.POST_SCRIPTS_ENABLED != 'true') {
          echo("Post-creation scripts execution is disabled. Skipping.")
          return
        }

        def credentialsId = "${odsNamespace}-cd-user-with-password"
        
        def scripts = env.POST_SCRIPTS_ORDER.split(',')
        def odsConfigPath = "${env.WORKSPACE}/ods-configuration/ods-core.env"
        def scriptsConfigPath = "${env.WORKSPACE}/post-creation-config/${env.POST_SCRIPTS_CONFIG_FILE}"
        
        withCredentials([usernamePassword(credentialsId: "${credentialsId}", passwordVariable: 'password', usernameVariable: 'username')]) {
          withEnv([
            "PROJECT_ID=${projectId}",
            "PROJECT_GROUPS=${projectGroups}",
            "PROJECT_ADMIN=${projectAdmins}",
            "ODS_NAMESPACE=${odsNamespace}",
            "ODS_IMAGE_TAG=${odsImageTag}",
            "ODS_GIT_REF=${odsGitRef}",
            "ODS_BITBUCKET_PROJECT=${odsBitbucketProject}",
            "BITBUCKET_URL=${bitbucketUrl}",
            "DOCKER_REGISTRY=${dockerRegistry}",
            "CD_USERNAME=${username}",
            "CD_PASSWORD=${password}",
            "CD_USER_CREDENTIALS_ID=${credentialsId}"
          ]) {
              echo("Environment variables for scripts:")

              for (script in scripts) {
                  def scriptName = script.trim()
                  def scriptPath = "post-project-creation/${scriptName}"

                  echo("Executing script: ${scriptName}")
                  
                  sh(
                      script: """
                      "${scriptPath}" "${odsConfigPath}" "${scriptsConfigPath}"
                      """,
                      label: "Execute script: ${scriptName}"
                  )
              }
          }
        }
      }
    }
  }
}

def getConfigValue(field, file, defaultValue = '') {
  return sh(
    script: "grep '^${field}=' ${file} | cut -d'=' -f2 | tr -d '\"' || echo '${defaultValue}'",
    returnStdout: true
  ).trim()
}
