// BuildConfig environment variables
def odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
def odsGitRef = env.ODS_GIT_REF ?: 'production'
def projectId = env.PROJECT_ID
def projectAdmins = env.PROJECT_ADMIN
def projectGroups = env.PROJECT_GROUPS
def pipelineTriggerSecret = env.PIPELINE_TRIGGER_SECRET
def cdUserIdB64 = env.CD_USER_ID_B64
def cdUserType = env.CD_USER_TYPE

// Jenkins DeploymentConfig environment variables
def bitbucketHost
def dockerRegistry
node {
  dockerRegistry = env.DOCKER_REGISTRY
  bitbucketHost = env.BITBUCKET_HOST
}

def gitIsHttps = false

def conts = containerTemplate(
  name: 'jnlp',
  image: "${dockerRegistry}/cd/jenkins-slave-base:${odsImageTag}",
  workingDir: '/tmp',
  alwaysPullImage: true,
  args: ''
)
def podLabel = "create-projects-${projectId}";

podTemplate(
  label: podLabel,
  cloud: 'openshift',
  containers: [conts],
  volumes: [],
  serviceAccount: 'jenkins'
) {
  node(podLabel) {

    stage('checkout') {
      checkout scm
      gitIsHttps = sh(
        returnStdout: true,
        script: 'git config remote.origin.url'
      ).trim().startsWith("https");
    }

    stage('checkout ods-config') {
      def bitbucketScheme = gitIsHttps ? "https://" : "http://"
      def bitbucketUrl = bitbucketScheme + bitbucketHost;
      checkout([
        $class: 'GitSCM',
        branches: [[name: "*/${odsGitRef}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[
          $class: 'RelativeTargetDirectory',
          relativeTargetDir: 'ods-config'
        ]],
        submoduleCfg: [],
        userRemoteConfigs: [[
          credentialsId: 'prov-cd-cd-user-with-password',
          url: "${bitbucketUrl}/scm/opendevstack/ods-configuration.git"
        ]]
      ])
    }

    stage('creating openshift projects') {
      sh "sh ./create-projects/create-projects.sh"
    }

    stage('creating jenkins') {
      sh "sh ./create-projects/create-cd-jenkins.sh"
    }
  }
}
