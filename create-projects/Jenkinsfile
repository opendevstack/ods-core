// BuildConfig environment variables
def odsNamespace = env.ODS_NAMESPACE ?: 'ods'
def odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
def odsGitRef = env.ODS_GIT_REF ?: 'master'
def odsBitbucketProject = env.ODS_BITBUCKET_PROJECT ?: 'opendevstack'
def projectId = env.PROJECT_ID
def projectAdmins = env.PROJECT_ADMIN ?: ''
def projectGroups = env.PROJECT_GROUPS ?: ''
def pipelineTriggerSecret = env.PIPELINE_TRIGGER_SECRET
def cdUserIdB64 = env.CD_USER_ID_B64
def cdUserType = env.CD_USER_TYPE

// Jenkins DeploymentConfig environment variables
def bitbucketUrl
def dockerRegistry
def pipelineOpenShiftProject
node {
  dockerRegistry = env.DOCKER_REGISTRY
  if (env.GIT_SERVER_URL) {
    bitbucketUrl = env.GIT_SERVER_URL
  } else if (env.BITBUCKET_URL) {
    bitbucketUrl = env.BITBUCKET_URL
  } else if (env.BITBUCKET_HOST) {
    bitbucketUrl = env.BITBUCKET_HOST // Fallback for Jenkins master instances not updated from 2.x
  } else {
    error('''Neither 'GIT_SERVER_URL' nor 'BITBUCKET_URL' is present, but at least one is required.''')
  }
  if (!bitbucketUrl.contains('://')) {
    bitbucketUrl = "https://${bitbucketUrl}" // Fallback for old provisioning app instances not updated from 2.x
  }
  echo("Resolved variable 'bitbucketUrl' to '${bitbucketUrl}'! [default=${env.BITBUCKET_URL}, custom=${env.GIT_SERVER_URL}]")
  pipelineOpenShiftProject = env.JOB_NAME.split('/').first()
}

def conts = containerTemplate(
  name: 'jnlp',
  image: "${dockerRegistry}/${odsNamespace}/jenkins-agent-base:${odsImageTag}",
  workingDir: '/tmp',
  alwaysPullImage: true,
  args: ''
)
def podLabel = "create-projects-${projectId}";

podTemplate(
  label: podLabel,
  cloud: 'openshift',
  containers: [conts],
  volumes: [],
  serviceAccount: 'jenkins'
) {
  node(podLabel) {
    currentBuild.description = "ODS Build #${env.BUILD_NUMBER} creating project: ${projectId}"
    stage('Checkout ods-core') {
      sh 'mkdir -p ods-core'
      dir('ods-core') {
        checkout scm
      }
    }

    stage('Checkout ods-configuration') {
      echo("Getting ods configuration from ${bitbucketUrl}")
      checkout([
        $class: 'GitSCM',
        branches: [[name: "*/master"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[
          $class: 'RelativeTargetDirectory',
          relativeTargetDir: 'ods-configuration'
        ]],
        submoduleCfg: [],
        userRemoteConfigs: [[
          credentialsId: "${pipelineOpenShiftProject}-cd-user-with-password",
          url: "${bitbucketUrl}/scm/${odsBitbucketProject}/ods-configuration.git"
        ]]
      ])
    }

    stage('Create OpenShift projects') {
      dir('ods-core') {
        sh(
          script: """./create-projects/create-projects.sh --verbose \
            --project=${projectId} \
            --groups=${projectGroups}""",
          label: 'Create OpenShift projects'
        )
      }
    }

    stage('Setup Jenkins in CD project') {
      dir('ods-core') {
        sh(
          script: """./create-projects/create-cd-jenkins.sh --verbose \
            --non-interactive \
            --project=${projectId} \
            --ods-namespace=${odsNamespace} \
            --ods-image-tag=${odsImageTag} \
            --ods-bitbucket-project ${odsBitbucketProject} \
            --pipeline-trigger-secret-b64=${pipelineTriggerSecret} \
            --cd-user-type=${cdUserType} \
            --cd-user-id-b64=${cdUserIdB64}""",
          label: 'Setup Jenkins in CD project'
        )
      }
    }

    stage('Auto provision releasemanager component') {
      dir('ods-core') {
        def credentialsId = "${odsNamespace}-cd-user-with-password"
        def odsPipelineTriggerSecret = sh(
          script: "grep '^PIPELINE_TRIGGER_SECRET=' ../ods-configuration/ods-core.env | cut -d'=' -f2",
          returnStdout: true
        ).trim()
        def jiraUrl = sh(
          script: "grep '^JIRA_URL=' ../ods-configuration/ods-core.env | cut -d'=' -f2",
          returnStdout: true
        ).trim()     
        def mktUrl = sh(
          script: "grep '^MARKETPLACE_URL=' ../ods-configuration/ods-core.env | cut -d'=' -f2",
          returnStdout: true
        ).trim()              
        withCredentials([usernamePassword(credentialsId: "${credentialsId}", passwordVariable: 'password', usernameVariable: 'username')]) {
          sh(
            script: """./create-projects/provision-release-manager.sh --verbose \
              --trigger_secret ${odsPipelineTriggerSecret} \
              --project_key ${projectId} \
              --webhook_proxy_url ${env.JENKINS_URL.replace('jenkins-ods', 'webhook-proxy-ods').replaceAll('/$', '')} \
              --component_id releasemanager \
              --branch ${odsGitRef} \
              --git_url_ssh ssh://git@${bitbucketUrl.replaceFirst(/^https?:\/\//, '')}:7999/${projectId.toLowerCase()}/${projectId.toLowerCase()}-releasemanager.git \
              --git_url_http ${bitbucketUrl}/scm/${projectId.toLowerCase()}/${projectId.toLowerCase()}-releasemanager.git \
              --group_id com.boehringer.${projectId.toLowerCase()} \
              --package_name com.boehringer.${projectId.toLowerCase()}.releasemanager \
              --ods_namespace ${odsNamespace} \
              --ods_bb_project ${odsBitbucketProject} \
              --ods_image_tag ${odsImageTag} \
              --ods_git_ref ${odsGitRef} \
              --bitbucket_url ${bitbucketUrl} \
              --username ${username} \
              --password ${password} \
              --admin_group BI-AS-ATLASSIAN-P-${projectId.toUpperCase()}-MANAGER \
              --user_group BI-AS-ATLASSIAN-P-${projectId.toUpperCase()}-TEAM""",
            label: 'provision releasemanager'
          )
          sh(
            script: """./create-projects/create-jira-component.sh --verbose \
              --project_key ${projectId} \
              --jira_url ${jiraUrl} \
              --username ${username} \
              --password ${password}""",
            label: 'create releasemanager component in jira'
          )    
          sh(
            script: """./create-projects/create-marketplace-component.sh --verbose \
              --project_key ${projectId} \
              --mkt_url ${mktUrl} \
              --username ${username} \
              --password ${password}""",
            label: 'create releasemanager component in marketplace'
          )
        }       
      }
    }
  }
}
