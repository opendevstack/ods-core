name: Continous Integration Tests
on: [push, pull_request]
jobs:
  jenkins:
    name: Jenkins tests
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Build image
        working-directory: jenkins/master
        run: |
          docker build -t jenkins .
  sonarqube:
    name: SonarQube tests
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        version: ['7.9', '8.2.0.32929'] # 7.9 = LTS, 8.2 = latest version
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Check shell scripts
        run: |
          shellcheck sonarqube/*.sh
      -
        name: Run tests
        run: |
          cd sonarqube && ./test.sh --sq-version=${{ matrix.version }}

  nexus:
    name: Nexus tests
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Check shell scripts
        run: |
          shellcheck nexus/*.sh
      -
        name: Run tests
        run: |
          cd nexus && ./test.sh

  webhook-proxy:
    name: Webhook Proxy tests
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Setup Go 1.12
        uses: actions/setup-go@v1.0.0
        with:
          version: 1.12
      -
        name: Download goimports
        run: |
          go get golang.org/x/tools/cmd/goimports
      -
        name: Download golangci-lint
        run: |
          curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.17.1
      -
        name: Run linter
        working-directory: jenkins/webhook-proxy
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make lint
      -
        name: Run tests
        working-directory: jenkins/webhook-proxy
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make test
      -
        name: Build image
        working-directory: jenkins/webhook-proxy
        run: |
          docker build -t webhook-proxy .

# cluster:
#   name: Setup and project provisioning tests
#   runs-on: ubuntu-16.04
#   steps:
#     -
#       name: GitHub context
#       env:
#         GITHUB_CONTEXT: ${{ toJson(github) }}
#       run: jq . <<< "${GITHUB_CONTEXT}"
#     -
#       name: Checkout repository
#       uses: actions/checkout@v2.0.0
#       with:
#         fetch-depth: 0
#         path: 'ods-core'
#     -
#       name: Setup Go 1.13
#       uses: actions/setup-go@v1.0.0
#       with:
#         version: 1.13
#     -
#       name: Download OpenShift Client
#       run: |
#         wget https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz
#         tar -xzvf openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz
#         sudo mv openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc /usr/local/bin/oc
#     -
#       name: Download Tailor
#       run: |
#         curl -LO "https://github.com/opendevstack/tailor/releases/download/v0.13.1/tailor-linux-amd64"
#         chmod +x tailor-linux-amd64
#         sudo mv tailor-linux-amd64 /usr/local/bin/tailor
#     -
#        name: Tailor version
#        run: tailor version
#     -
#        name: OpenShift client version
#        run: oc version
#     -
#        name: jq version
#        run: jq --version
#     -
#        name: golang version
#        run: go version
#     -
#        name: Docker version
#        run: docker --version
#     -
#        name: Network before changes
#        run: ifconfig
#     -
#        name: Configure docker network and insecure registries
#        run: ./ods-core/tests/scripts/apply-docker-settings.sh
#     -
#        name: Start OC cluster
#        run: oc cluster up --base-dir=${HOME}/openshift.local.clusterup --routing-suffix 172.17.0.1.nip.io --public-hostname 172.17.0.1 --enable=centos-imagestreams --enable=persistent-volumes --enable=registry --enable=router
#     -
#        name: Login into the cluster
#        run: oc login -u system:admin
#     -
#        name: Create test infrastructure
#        run: |
#         mkdir -p ods-config
#         ./ods-core/tests/scripts/recreate-test-infrastructure.sh
#     -
#        name: Run tests
#        run: make -C tests test
